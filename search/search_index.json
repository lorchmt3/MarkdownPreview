{
    "docs": [
        {
            "location": "/",
            "text": "Overview\n\ue157\n\n\nPreview and build your markdown files quickly in your web browser.\n\n\nYou can use the builtin \nPython Markdown\n parser (offline) or use the \nGitHub Markdown API\n (online) for the conversion.\n\n\n\n\nNote\n\n\nIf you choose the GitHub API for conversion (set \nparser\n to \ngithub\n in your settings), your code will be sent through HTTPS to GitHub for live conversion. You'll have \nGitHub Flavored Markdown\n, syntax highlighting and EMOJI support for free \n \n. If you make more than 60 calls a day, be sure to set your GitHub API key in the settings \n.\n\n\n\n\nFeatures\n\ue157\n\n\n\n\nMarkdown preview using the \npython-markdown\n with syntax highlighting via Pygments and optional 3\nrd\n party extensions (\npymdown-extensions\n included by default).\n\n\nMarkdown previews via the GitHub API.\n\n\nAbility use other external Markdown parsers.\n\n\nBuild markdown file using Sublime Text build system.\n\n\nBrowser preview auto reload on save if you have the \nLiveReload plugin\n installed.\n\n\nConfigurable CSS and JavaScript assets with overriding if needed.\n\n\nYAML support thanks to \n@tommi\n.\n\n\nClipboard selection and copy to clipboard thanks to \n@hexatrope\n.\n\n\nMathJax support : \n\\frac{\\pi}{2}\n\\frac{\\pi}{2}\n thanks to \n@bps10\n.\n\n\nHTML template customization thanks to \n@hozaka\n.\n\n\nEmbed images as base64.\n\n\nStrip out MultiMarkdown CriticMarkup.\n\n\n\n\nSupport\n\ue157\n\n\n\n\nAny bugs about Markdown Preview please feel free to report \nhere\n.\n\n\nAnd you are welcome to fork and submit pull requests.\n\n\n\n\nAttribution\n\ue157\n\n\nMarkdown Preview contains a stripped down version of font awesome that is included in the default non-GitHub CSS.  It contains only the icons we currently use.\n\n\nhttps://fontawesome.com/license\n\n\nLicense\n\ue157\n\n\nThe code is available at \nGitHub\n under the \nMIT license\n.\n\n\n\nMathJax.Hub.Config({\n    config: [\"MMLorHTML.js\"],\n    jax: [\"input/TeX\", \"output/HTML-CSS\", \"output/NativeMML\"],\n    extensions: [\"MathMenu.js\", \"MathZoom.js\"],\n    TeX: {\n        TagSide: \"right\",\n        TagIndent: \".8em\",\n        MultLineWidth: \"85%\",\n        equationNumbers: {\n            autoNumber: \"AMS\",\n        }\n    },\n    displayAlign: 'left',\n    showProcessingMessages: false,\n    messageStyle: 'none'\n});",
            "title": "Markdown Preview"
        },
        {
            "location": "/#overview",
            "text": "Preview and build your markdown files quickly in your web browser.  You can use the builtin  Python Markdown  parser (offline) or use the  GitHub Markdown API  (online) for the conversion.   Note  If you choose the GitHub API for conversion (set  parser  to  github  in your settings), your code will be sent through HTTPS to GitHub for live conversion. You'll have  GitHub Flavored Markdown , syntax highlighting and EMOJI support for free    . If you make more than 60 calls a day, be sure to set your GitHub API key in the settings  .",
            "title": "Overview"
        },
        {
            "location": "/#features",
            "text": "Markdown preview using the  python-markdown  with syntax highlighting via Pygments and optional 3 rd  party extensions ( pymdown-extensions  included by default).  Markdown previews via the GitHub API.  Ability use other external Markdown parsers.  Build markdown file using Sublime Text build system.  Browser preview auto reload on save if you have the  LiveReload plugin  installed.  Configurable CSS and JavaScript assets with overriding if needed.  YAML support thanks to  @tommi .  Clipboard selection and copy to clipboard thanks to  @hexatrope .  MathJax support :  \\frac{\\pi}{2} \\frac{\\pi}{2}  thanks to  @bps10 .  HTML template customization thanks to  @hozaka .  Embed images as base64.  Strip out MultiMarkdown CriticMarkup.",
            "title": "Features"
        },
        {
            "location": "/#support",
            "text": "Any bugs about Markdown Preview please feel free to report  here .  And you are welcome to fork and submit pull requests.",
            "title": "Support"
        },
        {
            "location": "/#attribution",
            "text": "Markdown Preview contains a stripped down version of font awesome that is included in the default non-GitHub CSS.  It contains only the icons we currently use.  https://fontawesome.com/license",
            "title": "Attribution"
        },
        {
            "location": "/#license",
            "text": "The code is available at  GitHub  under the  MIT license .  \nMathJax.Hub.Config({\n    config: [\"MMLorHTML.js\"],\n    jax: [\"input/TeX\", \"output/HTML-CSS\", \"output/NativeMML\"],\n    extensions: [\"MathMenu.js\", \"MathZoom.js\"],\n    TeX: {\n        TagSide: \"right\",\n        TagIndent: \".8em\",\n        MultLineWidth: \"85%\",\n        equationNumbers: {\n            autoNumber: \"AMS\",\n        }\n    },\n    displayAlign: 'left',\n    showProcessingMessages: false,\n    messageStyle: 'none'\n});",
            "title": "License"
        },
        {
            "location": "/install/",
            "text": "Installation\n\ue157\n\n\nUsing \nPackage Control\n (\nRecommended\n)\n\ue157\n\n\nWe recommend installing via \nPackage Control\n.\n\n\n\n\nInstall\n Package Control if you haven't yet.\n\n\nUse the shortcut ++cmd+shift+p then select \nPackage Control: Install Package\n.\n\n\nLook for and select \nMarkdownPreview\n.",
            "title": "Installation"
        },
        {
            "location": "/install/#installation",
            "text": "",
            "title": "Installation"
        },
        {
            "location": "/install/#using-package-control-recommended",
            "text": "We recommend installing via  Package Control .   Install  Package Control if you haven't yet.  Use the shortcut ++cmd+shift+p then select  Package Control: Install Package .  Look for and select  MarkdownPreview .",
            "title": "Using Package Control (Recommended)"
        },
        {
            "location": "/usage/",
            "text": "Usage\n\ue157\n\n\n\n\nInfo\n\n\nWhen referring to settings, we are referring to the settings found at \nPreferences\n->\nPackage Settings\n->\nMarkdownPreview\n.\n\n\n\n\nSettings - User\n is where you change your settings for Markdown Preview.\n\n\nSettings - Default\n is a good reference with detailed descriptions for each setting.\n\n\n\n\n\n\nTo preview\n\ue157\n\n\n\n\nOptionally select some of your markdown for conversion.\n\n\n\n\nUse the shortcut \nCmd\n\uff0b\nShift\n\uff0b\nP\n then select \nMarkdownPreview\n to show the follow commands (you will be prompted to select which parser you prefer):\n\n\n\n\nMarkdown Preview: Preview in Browser\n\n\nMarkdown Preview: Export HTML in Sublime Text\n\n\nMarkdown Preview: Copy to Clipboard\n\n\nMarkdown Preview: Open Markdown Cheat sheet\n\n\n\n\n\n\n\n\n\n\nOr bind some shortcut in your user key binding, go to \nPreferences --> Keybindings\n then add to the User map:\n\n\nFor a specific parser and target:\n\n\n{\n \n\"keys\"\n:\n \n[\n\"alt+m\"\n],\n \n\"command\"\n:\n \n\"markdown_preview\"\n,\n \n\"args\"\n:\n \n{\n\"target\"\n:\n \n\"browser\"\n,\n \n\"parser\"\n:\n\"markdown\"\n}\n \n},\n\n\n\n\n\nTo bring up the quick panel to select enabled parsers for a given target:\n\n\n{\n \n\"keys\"\n:\n \n[\n\"alt+m\"\n],\n \n\"command\"\n:\n \n\"markdown_preview_select\"\n,\n \n\"args\"\n:\n \n{\n\"target\"\n:\n \n\"browser\"\n}\n \n},\n\n\n\n\n\n\n\n\n\nIf you want to control which browser the preview is opened in, you can edit the \nbrowser\n option in the settings file:\n\n\n    \n/*\n\n\n        Sets the default opener for HTML files\n\n\n\n        default - Use the system default HTML viewer\n\n\n        other - Set a full path to any executable. ex: /Applications/Google Chrome Canary.app or /Applications/Firefox.app\n\n\n    */\n\n    \n\"browser\"\n:\n \n\"default\"\n,\n\n\n\n\n\n\n\n\n\nCustom Templates\n\ue157\n\n\nBy default, Markdown Preview uses a simple template, but you can use your own custom template with the setting \nhtml_template\n. If you wish to not include the default stylesheets, just remove them from the \ncss\n option.\n\n\n    \n/*\n\n\n        Specify a HTML template file to render your markdown within.\n\n\n\n        Available place holders in HTML template:\n\n\n        {{ HEAD }} - would be replaced by generated stylesheets, javascripts enabled above\n\n\n        {{ BODY }} - would be replaced by HTML converted from markdown\n\n\n\n        By setting \"skip_default_stylesheet\" to true you can use the styles only in your HTML\n\n\n        template. In most cases you should turn this setting on to have a full-featured design.\n\n\n\n        Refer to 'customized-template-sample.html' as a show case.\n\n\n    */\n\n    \n\"html_template\"\n:\n \n\"/ABS_PATH_TO_A_HTML_FILE\"\n,\n\n\n\n\n\nLiveReload\n\ue157\n\n\nTo get live updates while editing a file after preview, you need to do the following:\n\n\n\n\nEnable the \nenable_autoreload\n setting in \nMarkdownPreview.sublime-settings\n.\n    \n     \n/*\n\n\n        Enable auto-reloaded on save. Will not work if GitHub parser is used without oauth key specified.\n\n\n    */\n\n    \n\"enable_autoreload\"\n:\n \ntrue\n,\n\n\n\n\nInstall [LiveReload][7] package from Package Control.\n\n\nRestart.\n\n\nOpen the command palette and select the command \nLiveReload: Enable/disable plug-ins\n.\n\n\nSelect \nSimple Reload with delay (400ms)\n.  It is possible you can get away with \nSimple Reload\n, but some experience an issue where they are one rev behind when using \nSimple Reload\n.\n\n\nEdit document and enjoy live reload.\n\n\n\n\nYou don't need to enable \nSimple Reload\n on every file as it is done globally; it can be turned on or off as needed.  From now on, files should auto-reload when you open them in the browser unless you disable \nSimple Reload\n.\n\n\nPreview Path Conversion\n\ue157\n\n\nIn the generated previews, paths are converted so that images and other links work properly. By default, paths are converted to absolute paths, but you can use relative if desired as well.  Image paths can also be changed to inject embedded base 64 images (only for local images). Path handling is controlled by the following two settings:\n\n\n    \n/*\n\n\n        Sets how image paths are handled.\n\n\n        Setting is a string value: (absolute | relative | base64 | none)\n\n\n            absolute: converts relative local paths to absolute\n\n\n            relative: converts relative local paths to a path relative to the\n\n\n                        HTML output\n\n\n            base64: coverts the local file to base64 and embeds it in the HTML\n\n\n            none: does nothing\n\n\n    */\n\n    \n\"image_path_conversion\"\n:\n \n\"absolute\"\n,\n\n\n    \n/*\n\n\n        Sets how file paths are handled.\n\n\n        Setting is a string value: (absolute | relative | none)\n\n\n            absolute: converts relative local paths to absolute\n\n\n            relative: converts relative local paths to a path relative to the\n\n\n                        HTML output\n\n\n            none: does nothing\n\n\n    */\n\n    \n\"file_path_conversions\"\n:\n \n\"absolute\"\n,\n\n\n\n\n\nPreview Temp Location\n\ue157\n\n\nBy default, previews are generated in the OSs default temp location, but you can specify your own custom temp location via the \npath_tempfile\n option:\n\n\n    \n/*\n\n\n        Sets a custom temporary folder for MarkdownPreview-generated HTML files. Useful if you're\n\n\n        using LiveReload and don't want to use the OS default. The directory will be created if it\n\n\n        doesn't exist. Relative paths are supported, and are checked against `os.path.isabs`, see\n\n\n        doc: http://docs.python.org/3/library/os.path.html#os.path.isabs\n\n\n\n        Examples: /tmp/custom_folder   (Linux/OSX - absolute path)\n\n\n                    C:/TEMP/MYNOTES\n\n\n                    C:\\\\TEMP\\\\MYNOTES    (Windows - absolute path, forward slash or escaped back slash)\n\n\n                    build                (All OS - relative path, current dir)\n\n\n                    ../build             (Linux/OSX - relative path, in parent dir)\n\n\n                    ..\\\\build            (Windows - relative path, in parent dir)\n\n\n    */\n\n    \n\"path_tempfile\"\n:\n \n\"/tmp/my_notes\"\n,\n\n\n\n\n\nEnabling Other External Markdown Parsers\n\ue157\n\n\nExternal parser commands and arguments should first be mapped to a name.  Each binary value must be an array with the path to the binary being first, followed by flags and options as individual indexes in the array.\n\n\n    \n\"markdown_binary_map\"\n:\n \n{\n\n        \n\"multimarkdown\"\n:\n \n[\n\"/usr/local/bin/multimarkdown\"\n,\n \n\"--some-option\"\n,\n \n\"some-value\"\n]\n\n    \n},\n\n\n\n\n\nThen the name can be placed in \nenabled_parsers\n to enable use of the new parser.\n\n\n    \n\"enabled_parsers\"\n:\n \n[\n\"markdown\"\n,\n \n\"github\"\n,\n \n\"multimarkdown\"\n],\n\n\n\n\n\nConfiguring Python Markdown Extensions\n\ue157\n\n\nPython Markdown comes with a number of extensions and can also use a number of 3\nrd\n party extensions.  To configure Markdown Preview with extensions, use the \nmarkdown_extensions\n setting.\n\n\nmarkdown_extensions\n is a setting that contains an array of extensions in the format of their import path. For instance, the Toc (Table of Contents) extension is found in the Markdown Package at \nmarkdown.extensions.toc\n.  This is according to Python Markdown \ndocumentation\n.  All extensions must be specified this way.\n\n\n    \n\"markdown_extensions\"\n:\n \n[\n\n        \n\"markdown.extensions.toc\"\n\n    \n]\n\n\n\n\n\nTo configure an extension, make the entry a dictionary.  In this example, we want to turn on Toc's permalink feature:\n\n\n    \n\"markdown_extensions\"\n:\n \n[\n\n        \n{\n\n            \n\"markdown.extensions.toc\"\n:\n \n{\n\n                \n\"permalink\"\n:\n \ntrue\n\n            \n}\n\n        \n}\n\n    \n]\n\n\n\n\n\nYou can configure extension options with strings, booleans, integers, floats, etc.  But sometimes, an extension can take a function.  Functions are not part of the JSON spec. Luckily, support has been added with the following syntax:\n\n\nTo specify a function, create an object whose key is named \n!!python/name\n, and whose value is the import path of the function.  This syntax was picked to be similar to PyYaml's syntax which is used for the Markdown frontmatter.\n\n\nSo let's pretend we didn't like Toc's default slugify \nmarkdown.extensions.headerid.slugify\n, and instead wanted to use PyMdown Extensions' slugify \npymdownx.slugs.uslugify\n.  We could specify the new slugify function with the following syntax:\n\n\n    \n\"markdown_extensions\"\n:\n \n[\n\n        \n{\n\n            \n\"markdown.extensions.toc\"\n:\n \n{\n\n                \n\"slugify\"\n:\n \n{\n\"!!python/name\"\n,\n \n\"pymdownx.slugs.uslugify\"\n}\n\n            \n}\n\n        \n}\n\n    \n]\n\n\n\n\n\nCompare to the PyYaml format:\n\n\nmarkdown_extensions\n:\n\n  \n-\n \nmarkdown.extensions.toc\n:\n\n      \nslugify\n:\n \n!!python/name:pymdownx.slugs.uslugify\n\n\n\n\n\nTo build\n\ue157\n\n\nJust use \nctrl\n+\nB\n (Windows/Linux) or \ncmd\n+\nB\n (Mac) to build current file.\n\n\nYou can configure the build action by using the \nbuild_action\n setting.\n\n\n    \n/*\n\n\n        By default, Markdown Preview builds the HTML in the source directory.\n\n\n        It expects the file to exist on disk.  It pops up the build output panel etc.\n\n\n\n        If you wish to override this behavior, you can change \"build_action\"\n\n\n\n        build - The default build behavior.\n\n\n        browser - Preview the file in your browser.\n\n\n        clipboard - Copy the HTML output to the clipboard.\n\n\n        sublime - Export the HTML to a Sublime tab.\n\n\n        save - Run the normal save command that outputs to the source directory.\n\n\n            It will also prompt for \"save as\" if the file does not exit on disk.\n\n\n\n        All the build options use the default parser defined above in \"parser\"\n\n\n    */\n\n    \n\"build_action\"\n:\n \n\"build\"\n,\n\n\n\n\n\nAnd the parser that is used when building is set in the \nparser\n setting:\n\n\n    \n/*\n\n\n        Sets the parser used for building markdown to HTML.\n\n\n\n        NOTE: The parser setting is not for the preview commands now.\n\n\n        The previews have separate commands for each parser markdown.\n\n\n\n        Warning for github API: if you have a ST2 linux build, Python is not built with SSL so it may not work\n\n\n\n        default - The current default parser is python-markdown parser.\n\n\n        markdown - Use the built-in python-markdown parser\n\n\n        github - Use the github API to convert markdown, so you can use GitHub flavored Markdown, see https://help.github.com/articles/github-flavored-markdown/\n\n\n    */\n\n    \n\"parser\"\n:\n \n\"markdown\"\n,\n\n\n\n\n\nWhen building, a panel will be opened showing build information. This can be disabled by setting \nshow_panel_on_build\n to \nfalse\n:\n\n\n    \n/* do we show the panel when building with CMD+B */\n\n    \n\"show_panel_on_build\"\n:\n \ntrue\n,\n\n\n\n\n\nConfiguring Pygments\n\ue157\n\n\nIf you add the codehilite extension manually in the enabled extensions, you can override some of the default settings.\n\n\n\n\n\n\nTurn language guessing \non\n or \noff\n (\non\n will highlight fenced blocks even if you don't specify a language):\n\n\n\"markdown_extensions\"\n:\n \n[\n\n    \n\"codehilite\"\n:\n \n{\n\n        \n\"guess_lang\"\n:\n \nfalse\n\n    \n}\n\n\n]\n\n\n\n\n\n\n\n\n\nShow line numbers:\n\n\n\"markdown_extensions\"\n:\n \n[\n\n    \n\"codehilite\"\n:\n \n{\n\n        \n\"linenums\"\n:\n \nfalse\n\n    \n}\n\n\n]\n\n\n\n\n\n\n\n\n\nChange the highlight theme:\n\n\n\"markdown_extensions\"\n:\n \n[\n\n    \n\"codehilite\"\n:\n \n{\n\n        \n\"pygments_style\"\n:\n \n\"emacs\"\n\n    \n}\n\n\n]\n\n\n\n\n\n\n\n\n\nInline the CSS:\n\n\n\"markdown_extensions\"\n:\n \n[\n\n    \n\"codehilite\"\n:\n \n{\n\n        \n\"noclasses\"\n:\n \ntrue\n\n    \n}\n\n\n]\n\n\n\n\n\n\n\n\n\nUse multiple:\n    \n\"markdown_extensions\"\n:\n \n[\n\n    \n\"codehilite\"\n:\n \n{\n\n        \n\"linenums\"\n:\n \ntrue\n,\n\n        \n\"pygments_style\"\n:\n \n\"emacs\"\n\n    \n}\n\n\n]\n\n\n\n\n\n\n\n\nThe \ncodehiite\n extension's \npygments_style\n option is only useful if you are using \nnoclasses\n which writes the styles directly to the HTML tags via the \nstyle\n attribute. Normally, we just inject CSS generated by Pygments which is the default behavior. Whether the CSS injection occurs, the Pygments' style that is used, and the CSS class that is used for code blocks can all be controlled with the following options:\n\n\n    \n/*\n\n\n        If Pygments is being used, you may want to inject one of the Pygment styles provided into the HTML.\n\n\n        If so, enable this.\n\n\n    */\n\n    \n\"pygments_inject_css\"\n:\n \ntrue\n,\n\n\n    \n/*\n\n\n        Name of the Pygments style to inject. Available styles are the styles provided by pygments\n\n\n        plus \"github\" and \"github2014\".\n\n\n    */\n\n    \n\"pygments_style\"\n:\n \n\"github\"\n,\n\n\n    \n/*\n\n\n        This is the class to prepend to the pygments CSS styles. Make sure it matches whatever class(es)\n\n\n        you've specified in the extension that controls Pygments highlighting.  CodeHilite's default is\n\n\n        \"codehilite\".\n\n\n    */\n\n    \n\"pygments_css_class\"\n:\n \n\"codehilite\"\n,\n\n\n\n\n\nSee \ncodehilite page\n for more info.\n\n\nMeta Data Support\n\ue157\n\n\nWhen the \nmeta\n extension is enabled (\nhttps://python-markdown.github.io/extensions/meta_data\n), the results will be written to the HTML head in the form \n<meta name=\"key\" content=\"value1,value2\">\n.  \ntitle\n is the one exception, and its content will be written to the title tag in the HTML head.\n\n\nYAML Frontmatter Support\n\ue157\n\n\nYAML frontmatter can be stripped out and read when \nstrip_yaml_front_matter\n is set to  \ntrue\n in the settings file.  In general the, the frontmatter is handled the same as \nmeta data\n, but if both exist in a file, the YAML keys will override the \nmeta\n extension keys.  There are a few special key names that won't be handled as HTML meta data.\n\n\n    \n/*\n\n\n        Strips the YAML front matter header and converts title to a heading\n\n\n    */\n\n    \n\"strip_yaml_front_matter\"\n:\n \nfalse\n,\n\n\n\n\n\nSpecial YAML Key Names\n\ue157\n\n\nYAML frontmatter has a few special key names that are used that will not be handled as meta data:\n\n\n\n\nbasepath\n: An absolute path to configure the relative paths for images etc. (for when the markdown is supposed to reference images in a different location.)\n\n\nreferences\n: Can take a file path or an array of file paths for separate markdown files containing references, footnotes, etc.  Can be an absolute path or relative path.  Relative paths first use the source file's directory, and if the file cannot be found, it will use the \nbasepath\n setting.\n\n\ndestination\n: This is an absolute file path or relative file path for when the markdown is saved to HTML via the build command or the \nSave to HTML\n command.  Relative paths first use the source file's directory, and if the file cannot be found, it will use the \nbasepath\n setting.\n\n\nsettings\n: This is a dictionary where you can override settings that are in the settings file.\n\n\n\n\n---\n\n    \n# Builtin values\n\n    \nreferences\n:\n\n        \n-\n \nreferences.md\n\n        \n-\n \nabbreviations.md\n\n        \n-\n \nfootnotes.md\n\n\n    \ndestination\n:\n \ndestination.html\n\n\n    \n# Meta Data\n\n    \ntitle\n:\n \nTest Page\n\n    \nauthor\n:\n\n        \n-\n \nJohn Doe\n\n        \n-\n \nJane Doe\n\n\n    \n# Settings overrides\n\n    \nsettings\n:\n\n        \nenable_uml\n:\n \ntrue\n\n        \nmarkdown_extensions\n:\n\n          \n-\n \nmarkdown.extensions.footnotes\n\n          \n-\n \nmarkdown.extensions.attr_list\n\n          \n-\n \nmarkdown.extensions.def_list\n\n          \n-\n \nmarkdown.extensions.tables\n\n          \n-\n \nmarkdown.extensions.abbr\n\n          \n-\n \nmarkdown.extensions.toc\n\n          \n-\n \nmarkdown.extensions.smarty\n\n          \n-\n \nmarkdown.extensions.meta\n\n          \n-\n \nmarkdown.extensions.wikilinks\n\n          \n-\n \nmarkdown.extensions.admonition\n\n          \n-\n \nmarkdown.extensions.codehilite\n:\n\n              \nguess_lang\n:\n \nfalse\n\n              \npygments_style\n:\n \ngithub\n\n          \n-\n \npymdownx.extrarawhtml\n\n          \n-\n \npymdownx.progressbar\n\n          \n-\n \npymdownx.github\n\n          \n-\n \npymdownx.caret\n:\n\n              \nsuperscript\n:\n \nfalse\n\n\n---\n\n\n\n\n\nParsing GitHub Flavored Markdown\n\ue157\n\n\nGitHub Flavored Markdown (GFM) is a very popular markdown.  Markdown Preview can actually handle them in a couple of ways: online and offline.\n\n\nOnline\n\ue157\n\n\nParsing GFM using the online method requires using the GitHub API as the parser.  It may also require setting \ngithub_mode\n to \ngfm\n to get things like tasklists to render properly.\n\n\n    \n/*\n\n\n        Default mode for the github Markdown parser : markdown (documents) or gfm (comments)\n\n\n        see http://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document\n\n\n    */\n\n    \n\"github_mode\"\n:\n \n\"markdown\"\n,\n\n\n\n\n\nUsing the GitHub API without an oauth key is limited to so many calls.  After the limit is reached, the GitHub API will deny further calls until after a set limit of time. To avoid this issue, you can set your API key in the settings as follows:\n\n\n    \n/*\n\n\n        Uses an OAuth token when parsing markdown with GitHub API. To create one for Markdown Preview, see https://help.github.com/articles/creating-an-oauth-token-for-command-line-use.\n\n\n        Warn: this secret *must not be shared* with anyone and at least you should create it with minimal scopes for security reasons.\n\n\n    */\n\n    \n\"github_oauth_token\"\n:\n \n\"secret\"\n,\n\n\n\n\n\nThe GitHub API only inserts IDs for headers when \ngithub_mode\n is \nmarkdown\n, but it doesn't quite generate the way that GitHub does in your project's readmes on the site. This makes it so the GitHub CSS doesn't create the clickable anchors. So when \ngithub_mode\n is \nmarkdown\n, you can have Markdown Preview insert the ids properly so the CSS works with the following option:\n\n\n    \n/*\n\n\n        Enables a post process to inject header ids to ensure hrefs to headers work\n\n\n    */\n\n    \n\"github_inject_header_ids\"\n:\n \ntrue\n,\n\n\n\n\n\nOffline\n\ue157\n\n\nBy default almost all extensions are enabled to help with a GitHub-ish feel, but there are some tweaks needed to get the full experience.\n\n\nGFM does not auto guess language in fenced blocks, but Markdown Preview does this by default.  You can fix this in one of two ways:\n\n\n\n\nDisable auto language guessing in the settings file \n\"guess_language\": false,\n\n\n\n\nOr if you are manually defining extensions:\n\n\n\"markdown_extensions\"\n:\n \n[\n\n    \n\"codehilite\"\n:\n \n{\n\n        \n\"guess_lang\"\n:\n \nfalse\n,\n\n        \n\"pygments_style\"\n:\n \n\"github\"\n\n    \n}\n\n\n]\n\n\n\n\n\n\n\n\n\nAs mentioned earlier, a number of extensions are included by default. You can remove ones that are not part of GFM.\n\n\nIncluding CSS\n\ue157\n\n\nBy default Markdown Preview includes a default CSS via the \ncss\n setting.  It uses the special keyword \ndefault\n to represent the default CSS.\n\n\n    \n\"css\"\n:\n \n[\n\"default\"\n],\n\n\n\n\n\nYou can include whatever CSS you want, and even remove the \ndefault\n if you like.  It can take URLs or file paths. If you want to add a resource that is contained within a Sublime Package (like the Markdown Preview package itself), you can use the special URL of \nres://<package_name>/<subfolders>/file.css\n. Using the \nres://\n format will allow Markdown Preview to resolve the resource when it is in a package that is zipped and unzipped.\n\n\nOverride CSS by File Type\n\ue157\n\n\nYou can also override the default CSS with special file specific CSS. This CSS does not replace the default, but will append CSS for a supported file type after the conventional CSS.\n\n\nSo assuming the following configuration:\n\n\n    \n\"css\"\n:\n \n[\n\"default\"\n],\n\n    \n// File must be of one type below\n\n    \n\"markdown_filetypes\"\n:\n \n[\n\".md\"\n,\n \n\".markdown\"\n,\n \n\".mdown\"\n],\n\n\n\n\n\nWe could enable the following:\n\n\n    \n\"allow_css_overrides\"\n:\n \ntrue\n,\n\n\n\n\n\nThen if we have a file \nfilename.md\n and a CSS in the same directory \nfilename.css\n, that CSS will be applied to that file.\n\n\nIncluding HTML HEAD\n\ue157\n\n\nBy default, the head is always included in the HTML output. This includes the CSS, JavaScript, etc. If for some reason you need to omit the HEAD, you can by modifying the \ninclude_head\n option.  Just remove the target that you wish to omit the head in. The option \nbuild\n specifically refers to when \nbuild_action\n is set to \nbuild\n in the settings.\n\n\n    \n/* do we include the CSS when outputting HTML? */\n\n    \n\"include_head\"\n:\n \n[\n\"build\"\n,\n \n\"browser\"\n,\n \n\"sublime\"\n,\n \n\"clipboard\"\n,\n \n\"save\"\n]\n\n\n\n\n\nIncluding JavaScript\n\ue157\n\n\nJavaScript files can be included via the \njs\n setting.  It is a list and can take file paths or URLs. If you want to add a resource that is contained within a Sublime Package (like the Markdown Preview package itself), you can use the special URL of \nres://<package_name>/<subfolders>/file.js\n. Using the \nres://\n format will allow Markdown Preview to resolve the resource when it is in a package that is zipped and unzipped.\n\n\n    \n\"js\"\n:\n \n[],\n\n\n\n\n\nCriticMarkup\n\ue157\n\n\nPython Markdown can strip/apply out \nCriticMarkup\n syntax if desired.  Simply enable the following option:\n\n\n    \n/*\n\n\n        Sets how multimarkdown critic marks are handled.\n\n\n        Setting is a string value: (accept | reject | none)\n\n\n            accept: Accepts the proposed inserts and deletions (comments etc. are discarded)\n\n\n            reject: Rejects the proposed inserts and deletions (comments etc. are discarded)\n\n\n            none: does nothing\n\n\n\n        Critic marks only affects \"github\" and \"markdown\" (Python Markdown).\n\n\n    */\n\n    \n\"strip_critic_marks\"\n:\n \n\"none\"\n,\n\n\n\n\n\nSimple HTML Output\n\ue157\n\n\nSome people may desire a stripped down output on occasions that does not include HTML headers, inline styles, and IDs. Markdown Preview has a mode that will strip out these things and omit using a template.  This mode can be enabled via the the \nhtml_simple\n option:\n\n\n    \n/*\n\n\n        Sets HTML output to a simple form:\n\n\n            - No head\n\n\n            - No body tags\n\n\n            - ids, classes, and style are stripped out\n\n\n            - Just bare minimum HTML tags and attributes\n\n\n            - extension modifications included\n\n\n    */\n\n    \n\"html_simple\"\n:\n \nfalse\n,",
            "title": "Usage"
        },
        {
            "location": "/usage/#usage",
            "text": "Info  When referring to settings, we are referring to the settings found at  Preferences -> Package Settings -> MarkdownPreview .   Settings - User  is where you change your settings for Markdown Preview.  Settings - Default  is a good reference with detailed descriptions for each setting.",
            "title": "Usage"
        },
        {
            "location": "/usage/#to-preview",
            "text": "Optionally select some of your markdown for conversion.   Use the shortcut  Cmd \uff0b Shift \uff0b P  then select  MarkdownPreview  to show the follow commands (you will be prompted to select which parser you prefer):   Markdown Preview: Preview in Browser  Markdown Preview: Export HTML in Sublime Text  Markdown Preview: Copy to Clipboard  Markdown Preview: Open Markdown Cheat sheet      Or bind some shortcut in your user key binding, go to  Preferences --> Keybindings  then add to the User map:  For a specific parser and target:  {   \"keys\" :   [ \"alt+m\" ],   \"command\" :   \"markdown_preview\" ,   \"args\" :   { \"target\" :   \"browser\" ,   \"parser\" : \"markdown\" }   },   To bring up the quick panel to select enabled parsers for a given target:  {   \"keys\" :   [ \"alt+m\" ],   \"command\" :   \"markdown_preview_select\" ,   \"args\" :   { \"target\" :   \"browser\" }   },     If you want to control which browser the preview is opened in, you can edit the  browser  option in the settings file:       /*          Sets the default opener for HTML files          default - Use the system default HTML viewer          other - Set a full path to any executable. ex: /Applications/Google Chrome Canary.app or /Applications/Firefox.app      */ \n     \"browser\" :   \"default\" ,",
            "title": "To preview"
        },
        {
            "location": "/usage/#custom-templates",
            "text": "By default, Markdown Preview uses a simple template, but you can use your own custom template with the setting  html_template . If you wish to not include the default stylesheets, just remove them from the  css  option.       /*          Specify a HTML template file to render your markdown within.          Available place holders in HTML template:          {{ HEAD }} - would be replaced by generated stylesheets, javascripts enabled above          {{ BODY }} - would be replaced by HTML converted from markdown          By setting \"skip_default_stylesheet\" to true you can use the styles only in your HTML          template. In most cases you should turn this setting on to have a full-featured design.          Refer to 'customized-template-sample.html' as a show case.      */ \n     \"html_template\" :   \"/ABS_PATH_TO_A_HTML_FILE\" ,",
            "title": "Custom Templates"
        },
        {
            "location": "/usage/#livereload",
            "text": "To get live updates while editing a file after preview, you need to do the following:   Enable the  enable_autoreload  setting in  MarkdownPreview.sublime-settings .\n           /*          Enable auto-reloaded on save. Will not work if GitHub parser is used without oauth key specified.      */ \n     \"enable_autoreload\" :   true ,   Install [LiveReload][7] package from Package Control.  Restart.  Open the command palette and select the command  LiveReload: Enable/disable plug-ins .  Select  Simple Reload with delay (400ms) .  It is possible you can get away with  Simple Reload , but some experience an issue where they are one rev behind when using  Simple Reload .  Edit document and enjoy live reload.   You don't need to enable  Simple Reload  on every file as it is done globally; it can be turned on or off as needed.  From now on, files should auto-reload when you open them in the browser unless you disable  Simple Reload .",
            "title": "LiveReload"
        },
        {
            "location": "/usage/#preview-path-conversion",
            "text": "In the generated previews, paths are converted so that images and other links work properly. By default, paths are converted to absolute paths, but you can use relative if desired as well.  Image paths can also be changed to inject embedded base 64 images (only for local images). Path handling is controlled by the following two settings:       /*          Sets how image paths are handled.          Setting is a string value: (absolute | relative | base64 | none)              absolute: converts relative local paths to absolute              relative: converts relative local paths to a path relative to the                          HTML output              base64: coverts the local file to base64 and embeds it in the HTML              none: does nothing      */ \n     \"image_path_conversion\" :   \"absolute\" , \n\n     /*          Sets how file paths are handled.          Setting is a string value: (absolute | relative | none)              absolute: converts relative local paths to absolute              relative: converts relative local paths to a path relative to the                          HTML output              none: does nothing      */ \n     \"file_path_conversions\" :   \"absolute\" ,",
            "title": "Preview Path Conversion"
        },
        {
            "location": "/usage/#preview-temp-location",
            "text": "By default, previews are generated in the OSs default temp location, but you can specify your own custom temp location via the  path_tempfile  option:       /*          Sets a custom temporary folder for MarkdownPreview-generated HTML files. Useful if you're          using LiveReload and don't want to use the OS default. The directory will be created if it          doesn't exist. Relative paths are supported, and are checked against `os.path.isabs`, see          doc: http://docs.python.org/3/library/os.path.html#os.path.isabs          Examples: /tmp/custom_folder   (Linux/OSX - absolute path)                      C:/TEMP/MYNOTES                      C:\\\\TEMP\\\\MYNOTES    (Windows - absolute path, forward slash or escaped back slash)                      build                (All OS - relative path, current dir)                      ../build             (Linux/OSX - relative path, in parent dir)                      ..\\\\build            (Windows - relative path, in parent dir)      */ \n     \"path_tempfile\" :   \"/tmp/my_notes\" ,",
            "title": "Preview Temp Location"
        },
        {
            "location": "/usage/#enabling-other-external-markdown-parsers",
            "text": "External parser commands and arguments should first be mapped to a name.  Each binary value must be an array with the path to the binary being first, followed by flags and options as individual indexes in the array.       \"markdown_binary_map\" :   { \n         \"multimarkdown\" :   [ \"/usr/local/bin/multimarkdown\" ,   \"--some-option\" ,   \"some-value\" ] \n     },   Then the name can be placed in  enabled_parsers  to enable use of the new parser.       \"enabled_parsers\" :   [ \"markdown\" ,   \"github\" ,   \"multimarkdown\" ],",
            "title": "Enabling Other External Markdown Parsers"
        },
        {
            "location": "/usage/#configuring-python-markdown-extensions",
            "text": "Python Markdown comes with a number of extensions and can also use a number of 3 rd  party extensions.  To configure Markdown Preview with extensions, use the  markdown_extensions  setting.  markdown_extensions  is a setting that contains an array of extensions in the format of their import path. For instance, the Toc (Table of Contents) extension is found in the Markdown Package at  markdown.extensions.toc .  This is according to Python Markdown  documentation .  All extensions must be specified this way.       \"markdown_extensions\" :   [ \n         \"markdown.extensions.toc\" \n     ]   To configure an extension, make the entry a dictionary.  In this example, we want to turn on Toc's permalink feature:       \"markdown_extensions\" :   [ \n         { \n             \"markdown.extensions.toc\" :   { \n                 \"permalink\" :   true \n             } \n         } \n     ]   You can configure extension options with strings, booleans, integers, floats, etc.  But sometimes, an extension can take a function.  Functions are not part of the JSON spec. Luckily, support has been added with the following syntax:  To specify a function, create an object whose key is named  !!python/name , and whose value is the import path of the function.  This syntax was picked to be similar to PyYaml's syntax which is used for the Markdown frontmatter.  So let's pretend we didn't like Toc's default slugify  markdown.extensions.headerid.slugify , and instead wanted to use PyMdown Extensions' slugify  pymdownx.slugs.uslugify .  We could specify the new slugify function with the following syntax:       \"markdown_extensions\" :   [ \n         { \n             \"markdown.extensions.toc\" :   { \n                 \"slugify\" :   { \"!!python/name\" ,   \"pymdownx.slugs.uslugify\" } \n             } \n         } \n     ]   Compare to the PyYaml format:  markdown_extensions : \n   -   markdown.extensions.toc : \n       slugify :   !!python/name:pymdownx.slugs.uslugify",
            "title": "Configuring Python Markdown Extensions"
        },
        {
            "location": "/usage/#to-build",
            "text": "Just use  ctrl + B  (Windows/Linux) or  cmd + B  (Mac) to build current file.  You can configure the build action by using the  build_action  setting.       /*          By default, Markdown Preview builds the HTML in the source directory.          It expects the file to exist on disk.  It pops up the build output panel etc.          If you wish to override this behavior, you can change \"build_action\"          build - The default build behavior.          browser - Preview the file in your browser.          clipboard - Copy the HTML output to the clipboard.          sublime - Export the HTML to a Sublime tab.          save - Run the normal save command that outputs to the source directory.              It will also prompt for \"save as\" if the file does not exit on disk.          All the build options use the default parser defined above in \"parser\"      */ \n     \"build_action\" :   \"build\" ,   And the parser that is used when building is set in the  parser  setting:       /*          Sets the parser used for building markdown to HTML.          NOTE: The parser setting is not for the preview commands now.          The previews have separate commands for each parser markdown.          Warning for github API: if you have a ST2 linux build, Python is not built with SSL so it may not work          default - The current default parser is python-markdown parser.          markdown - Use the built-in python-markdown parser          github - Use the github API to convert markdown, so you can use GitHub flavored Markdown, see https://help.github.com/articles/github-flavored-markdown/      */ \n     \"parser\" :   \"markdown\" ,   When building, a panel will be opened showing build information. This can be disabled by setting  show_panel_on_build  to  false :       /* do we show the panel when building with CMD+B */ \n     \"show_panel_on_build\" :   true ,",
            "title": "To build"
        },
        {
            "location": "/usage/#configuring-pygments",
            "text": "If you add the codehilite extension manually in the enabled extensions, you can override some of the default settings.    Turn language guessing  on  or  off  ( on  will highlight fenced blocks even if you don't specify a language):  \"markdown_extensions\" :   [ \n     \"codehilite\" :   { \n         \"guess_lang\" :   false \n     }  ]     Show line numbers:  \"markdown_extensions\" :   [ \n     \"codehilite\" :   { \n         \"linenums\" :   false \n     }  ]     Change the highlight theme:  \"markdown_extensions\" :   [ \n     \"codehilite\" :   { \n         \"pygments_style\" :   \"emacs\" \n     }  ]     Inline the CSS:  \"markdown_extensions\" :   [ \n     \"codehilite\" :   { \n         \"noclasses\" :   true \n     }  ]     Use multiple:\n     \"markdown_extensions\" :   [ \n     \"codehilite\" :   { \n         \"linenums\" :   true , \n         \"pygments_style\" :   \"emacs\" \n     }  ]     The  codehiite  extension's  pygments_style  option is only useful if you are using  noclasses  which writes the styles directly to the HTML tags via the  style  attribute. Normally, we just inject CSS generated by Pygments which is the default behavior. Whether the CSS injection occurs, the Pygments' style that is used, and the CSS class that is used for code blocks can all be controlled with the following options:       /*          If Pygments is being used, you may want to inject one of the Pygment styles provided into the HTML.          If so, enable this.      */ \n     \"pygments_inject_css\" :   true , \n\n     /*          Name of the Pygments style to inject. Available styles are the styles provided by pygments          plus \"github\" and \"github2014\".      */ \n     \"pygments_style\" :   \"github\" , \n\n     /*          This is the class to prepend to the pygments CSS styles. Make sure it matches whatever class(es)          you've specified in the extension that controls Pygments highlighting.  CodeHilite's default is          \"codehilite\".      */ \n     \"pygments_css_class\" :   \"codehilite\" ,   See  codehilite page  for more info.",
            "title": "Configuring Pygments"
        },
        {
            "location": "/usage/#meta-data-support",
            "text": "When the  meta  extension is enabled ( https://python-markdown.github.io/extensions/meta_data ), the results will be written to the HTML head in the form  <meta name=\"key\" content=\"value1,value2\"> .   title  is the one exception, and its content will be written to the title tag in the HTML head.",
            "title": "Meta Data Support"
        },
        {
            "location": "/usage/#yaml-frontmatter-support",
            "text": "YAML frontmatter can be stripped out and read when  strip_yaml_front_matter  is set to   true  in the settings file.  In general the, the frontmatter is handled the same as  meta data , but if both exist in a file, the YAML keys will override the  meta  extension keys.  There are a few special key names that won't be handled as HTML meta data.       /*          Strips the YAML front matter header and converts title to a heading      */ \n     \"strip_yaml_front_matter\" :   false ,",
            "title": "YAML Frontmatter Support"
        },
        {
            "location": "/usage/#special-yaml-key-names",
            "text": "YAML frontmatter has a few special key names that are used that will not be handled as meta data:   basepath : An absolute path to configure the relative paths for images etc. (for when the markdown is supposed to reference images in a different location.)  references : Can take a file path or an array of file paths for separate markdown files containing references, footnotes, etc.  Can be an absolute path or relative path.  Relative paths first use the source file's directory, and if the file cannot be found, it will use the  basepath  setting.  destination : This is an absolute file path or relative file path for when the markdown is saved to HTML via the build command or the  Save to HTML  command.  Relative paths first use the source file's directory, and if the file cannot be found, it will use the  basepath  setting.  settings : This is a dictionary where you can override settings that are in the settings file.   --- \n     # Builtin values \n     references : \n         -   references.md \n         -   abbreviations.md \n         -   footnotes.md \n\n     destination :   destination.html \n\n     # Meta Data \n     title :   Test Page \n     author : \n         -   John Doe \n         -   Jane Doe \n\n     # Settings overrides \n     settings : \n         enable_uml :   true \n         markdown_extensions : \n           -   markdown.extensions.footnotes \n           -   markdown.extensions.attr_list \n           -   markdown.extensions.def_list \n           -   markdown.extensions.tables \n           -   markdown.extensions.abbr \n           -   markdown.extensions.toc \n           -   markdown.extensions.smarty \n           -   markdown.extensions.meta \n           -   markdown.extensions.wikilinks \n           -   markdown.extensions.admonition \n           -   markdown.extensions.codehilite : \n               guess_lang :   false \n               pygments_style :   github \n           -   pymdownx.extrarawhtml \n           -   pymdownx.progressbar \n           -   pymdownx.github \n           -   pymdownx.caret : \n               superscript :   false  ---",
            "title": "Special YAML Key Names"
        },
        {
            "location": "/usage/#parsing-github-flavored-markdown",
            "text": "GitHub Flavored Markdown (GFM) is a very popular markdown.  Markdown Preview can actually handle them in a couple of ways: online and offline.",
            "title": "Parsing GitHub Flavored Markdown"
        },
        {
            "location": "/usage/#online",
            "text": "Parsing GFM using the online method requires using the GitHub API as the parser.  It may also require setting  github_mode  to  gfm  to get things like tasklists to render properly.       /*          Default mode for the github Markdown parser : markdown (documents) or gfm (comments)          see http://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document      */ \n     \"github_mode\" :   \"markdown\" ,   Using the GitHub API without an oauth key is limited to so many calls.  After the limit is reached, the GitHub API will deny further calls until after a set limit of time. To avoid this issue, you can set your API key in the settings as follows:       /*          Uses an OAuth token when parsing markdown with GitHub API. To create one for Markdown Preview, see https://help.github.com/articles/creating-an-oauth-token-for-command-line-use.          Warn: this secret *must not be shared* with anyone and at least you should create it with minimal scopes for security reasons.      */ \n     \"github_oauth_token\" :   \"secret\" ,   The GitHub API only inserts IDs for headers when  github_mode  is  markdown , but it doesn't quite generate the way that GitHub does in your project's readmes on the site. This makes it so the GitHub CSS doesn't create the clickable anchors. So when  github_mode  is  markdown , you can have Markdown Preview insert the ids properly so the CSS works with the following option:       /*          Enables a post process to inject header ids to ensure hrefs to headers work      */ \n     \"github_inject_header_ids\" :   true ,",
            "title": "Online"
        },
        {
            "location": "/usage/#offline",
            "text": "By default almost all extensions are enabled to help with a GitHub-ish feel, but there are some tweaks needed to get the full experience.  GFM does not auto guess language in fenced blocks, but Markdown Preview does this by default.  You can fix this in one of two ways:   Disable auto language guessing in the settings file  \"guess_language\": false,   Or if you are manually defining extensions:  \"markdown_extensions\" :   [ \n     \"codehilite\" :   { \n         \"guess_lang\" :   false , \n         \"pygments_style\" :   \"github\" \n     }  ]     As mentioned earlier, a number of extensions are included by default. You can remove ones that are not part of GFM.",
            "title": "Offline"
        },
        {
            "location": "/usage/#including-css",
            "text": "By default Markdown Preview includes a default CSS via the  css  setting.  It uses the special keyword  default  to represent the default CSS.       \"css\" :   [ \"default\" ],   You can include whatever CSS you want, and even remove the  default  if you like.  It can take URLs or file paths. If you want to add a resource that is contained within a Sublime Package (like the Markdown Preview package itself), you can use the special URL of  res://<package_name>/<subfolders>/file.css . Using the  res://  format will allow Markdown Preview to resolve the resource when it is in a package that is zipped and unzipped.",
            "title": "Including CSS"
        },
        {
            "location": "/usage/#override-css-by-file-type",
            "text": "You can also override the default CSS with special file specific CSS. This CSS does not replace the default, but will append CSS for a supported file type after the conventional CSS.  So assuming the following configuration:       \"css\" :   [ \"default\" ], \n     // File must be of one type below \n     \"markdown_filetypes\" :   [ \".md\" ,   \".markdown\" ,   \".mdown\" ],   We could enable the following:       \"allow_css_overrides\" :   true ,   Then if we have a file  filename.md  and a CSS in the same directory  filename.css , that CSS will be applied to that file.",
            "title": "Override CSS by File Type"
        },
        {
            "location": "/usage/#including-html-head",
            "text": "By default, the head is always included in the HTML output. This includes the CSS, JavaScript, etc. If for some reason you need to omit the HEAD, you can by modifying the  include_head  option.  Just remove the target that you wish to omit the head in. The option  build  specifically refers to when  build_action  is set to  build  in the settings.       /* do we include the CSS when outputting HTML? */ \n     \"include_head\" :   [ \"build\" ,   \"browser\" ,   \"sublime\" ,   \"clipboard\" ,   \"save\" ]",
            "title": "Including HTML HEAD"
        },
        {
            "location": "/usage/#including-javascript",
            "text": "JavaScript files can be included via the  js  setting.  It is a list and can take file paths or URLs. If you want to add a resource that is contained within a Sublime Package (like the Markdown Preview package itself), you can use the special URL of  res://<package_name>/<subfolders>/file.js . Using the  res://  format will allow Markdown Preview to resolve the resource when it is in a package that is zipped and unzipped.       \"js\" :   [],",
            "title": "Including JavaScript"
        },
        {
            "location": "/usage/#criticmarkup",
            "text": "Python Markdown can strip/apply out  CriticMarkup  syntax if desired.  Simply enable the following option:       /*          Sets how multimarkdown critic marks are handled.          Setting is a string value: (accept | reject | none)              accept: Accepts the proposed inserts and deletions (comments etc. are discarded)              reject: Rejects the proposed inserts and deletions (comments etc. are discarded)              none: does nothing          Critic marks only affects \"github\" and \"markdown\" (Python Markdown).      */ \n     \"strip_critic_marks\" :   \"none\" ,",
            "title": "CriticMarkup"
        },
        {
            "location": "/usage/#simple-html-output",
            "text": "Some people may desire a stripped down output on occasions that does not include HTML headers, inline styles, and IDs. Markdown Preview has a mode that will strip out these things and omit using a template.  This mode can be enabled via the the  html_simple  option:       /*          Sets HTML output to a simple form:              - No head              - No body tags              - ids, classes, and style are stripped out              - Just bare minimum HTML tags and attributes              - extension modifications included      */ \n     \"html_simple\" :   false ,",
            "title": "Simple HTML Output"
        },
        {
            "location": "/extras/",
            "text": "Extras\n\ue157\n\n\nMathJax Support\n\ue157\n\n\nTo render Tex style math in Markdown, you can use the default MathJax configuration that is included with Markdown Preview or create and reference your own.\n\n\nWhen using Python Markdown (the \nmarkdown\n parser), it is recommended to use something like the extension \npymdownx.arithmatex\n as it ensures that math notation is preserved in the Markdown conversion process. GitHub (the \ngithub\n parser) does not have such an extension, so you might have to escape accordingly.\n\n\nIn this example, we will try to show a generalized approach that should work when using Python Markdown with \npymdownx.arithmatex\n or GitHub (though preservation of math in GitHub may or may not be problematic).\n\n\nMarkdown Preview provides a generalized script in \nMarkdownPreview/js/math_config.js\n. It searches for \n$\n...\n$\n, \n$$\n...\n$$\n, \n\\(\n...\n\\)\n, and \n\\[\n...\n\\]\n. You can change this to only target what you want by creating your own.\n\n\nTo load MathJax support, simply include the MathJax library along with the math config file provided by this extension. You are free to provide your own if you'd like to tweak the configuration:\n\n\n    \n\"js\"\n:\n \n[\n\n        \n\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js\"\n,\n\n        \n\"res://MarkdownPreview/js/math_config.js\"\n\n    \n]\n\n\n\n\n\nIf you are using \npymdownx.arithmatex\n you can configure like so to take advantage of the generalized configuration.  You are also free to customize Arithmatex to target only what you want and output in the different forms. Check out Arithmatex documentation for more info.\n\n\n    \n\"markdown_extensions\"\n:\n \n{\n\n        \n\"pymdownx.arithmatex\"\n:\n \n{\n\n            \n\"generic\"\n:\n \ntrue\n\n        \n}\n\n    \n}\n\n\n\n\n\nUML Support\n\ue157\n\n\nIf you are using the extension [SuperFences extension][superfences], it has an option to create special, custom fences. By default, it specifies \nflow\n and \nsequence\n languages to generate special code blocks that JavaScript can be applied to later to create UML diagrams: see \ndocumentation\n for more info. Assuming you are using SuperFences, you can include the following libraries to transform \nsequence\n and \nflow\n blocks using \njs-sequence-diagrams\n and \nflowchart.js\n respectively.\n\n\n    \n\"js\"\n:\n \n[\n\n        \n// Required libraries to transform UML notation\n\n        \n\"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\"\n,\n\n        \n\"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js\"\n,\n\n        \n\"https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js\"\n,\n\n        \n\"https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js\"\n,\n\n\n        \n// This library applies the above libraries to the fenced code blocks `flow` and `sequence`.\n\n        \n\"res://MarkdownPreview/js/uml.js\"\n\n    \n]",
            "title": "Extras"
        },
        {
            "location": "/extras/#extras",
            "text": "",
            "title": "Extras"
        },
        {
            "location": "/extras/#mathjax-support",
            "text": "To render Tex style math in Markdown, you can use the default MathJax configuration that is included with Markdown Preview or create and reference your own.  When using Python Markdown (the  markdown  parser), it is recommended to use something like the extension  pymdownx.arithmatex  as it ensures that math notation is preserved in the Markdown conversion process. GitHub (the  github  parser) does not have such an extension, so you might have to escape accordingly.  In this example, we will try to show a generalized approach that should work when using Python Markdown with  pymdownx.arithmatex  or GitHub (though preservation of math in GitHub may or may not be problematic).  Markdown Preview provides a generalized script in  MarkdownPreview/js/math_config.js . It searches for  $ ... $ ,  $$ ... $$ ,  \\( ... \\) , and  \\[ ... \\] . You can change this to only target what you want by creating your own.  To load MathJax support, simply include the MathJax library along with the math config file provided by this extension. You are free to provide your own if you'd like to tweak the configuration:       \"js\" :   [ \n         \"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js\" , \n         \"res://MarkdownPreview/js/math_config.js\" \n     ]   If you are using  pymdownx.arithmatex  you can configure like so to take advantage of the generalized configuration.  You are also free to customize Arithmatex to target only what you want and output in the different forms. Check out Arithmatex documentation for more info.       \"markdown_extensions\" :   { \n         \"pymdownx.arithmatex\" :   { \n             \"generic\" :   true \n         } \n     }",
            "title": "MathJax Support"
        },
        {
            "location": "/extras/#uml-support",
            "text": "If you are using the extension [SuperFences extension][superfences], it has an option to create special, custom fences. By default, it specifies  flow  and  sequence  languages to generate special code blocks that JavaScript can be applied to later to create UML diagrams: see  documentation  for more info. Assuming you are using SuperFences, you can include the following libraries to transform  sequence  and  flow  blocks using  js-sequence-diagrams  and  flowchart.js  respectively.       \"js\" :   [ \n         // Required libraries to transform UML notation \n         \"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\" , \n         \"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js\" , \n         \"https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js\" , \n         \"https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js\" , \n\n         // This library applies the above libraries to the fenced code blocks `flow` and `sequence`. \n         \"res://MarkdownPreview/js/uml.js\" \n     ]",
            "title": "UML Support"
        },
        {
            "location": "/changes/",
            "text": "Changes\n\ue157\n\n\n2.0.2\n\ue157\n\n\n\n\nCode highlighting should have guessing disabled by default.\n\n\nFix failure when code highlighting has guessing enabled, but the user specified a language name which has no lexer.\n\n\n\n\n2.0.1\n\ue157\n\n\n\n\nFix missing code highlight extension.\n\n\nFix build command failing.\n\n\n\n\n2.0.0\n\ue157\n\n\nPlease read documentation as there have been big changes in this version which may require updates to your personal settings.\n\n\n\n\n\n\nDo not vendor Python Markdown. Python Markdown will be acquired via the current markdown dependency.\n\n\n\n\n\n\nPython Markdown configuration changes:\n\n\n\n\nNo more defining settings as \nextension(option1=a,option2=b)\n. Options will be defined as a dictionary.\n\n\nYou will have to define the full extension name: \nmarkdown.extensions.codehilite\n. This will allow you to import any extension you want outside of Markdown Preview.\n\n\nNew line to \n<br>\n conversion has been dropped from GitHub emulation as GitHub no longer does this. Ref issue \n#374\n.\n\n\n\n\n\n\n\n\nOriginally a couple pymdownx-extension extensions were ported over to this plugin to give a GitHub-ish feel to Markdown, these are no longer be included directly, but are included as a dependency. This will provide the latest versions, and also provide new extensions previously not included. Ref issue \n#378\n.\n\n\n\n\n\n\nDrop ST2 so we no longer have to provide specially crafted Python Markdown versions when we try to upgrade.\n\n\n\n\n\n\nImprove yaml front matter parsing: see issue \n#392\n.\n\n\n\n\n\n\nBetter UML JavaScript injection.\n\n\n\n\n\n\nLink contributors in readme.\n\n\n\n\n\n\nRemove \"magic\" Pygments configuration. User will now explicitly configure Pygments CSS injection separately.\n\n\n\n\n\n\nRequire explicit parser name moving forward instead of default, but provide a deprecation path for the short term.\n\n\n\n\n\n\nFix GitHub header ID generation. GitHub only lowercases ASCII chars.\n\n\n\n\n\n\nEnsure default parser is Python Markdown, and enable auto-reload by default.\n\n\n\n\n\n\nHopefully better documentation.\n\n\n\n\n\n\nMake flake8 compatible.\n\n\n\n\n\n\nFix outdated links.\n\n\n\n\n\n\nRemove MathJax and UML option in favor of a more generalized solution via the pre-existing \ncss\n option.\n\n\n\n\n\n\nRemove \nembed_css_for_sublime_output\n option in favor of more generalized \ninclude_head\n option.\n\n\n\n\n\n\n1.4.3\n\ue157\n\n\n\n\nFix issue where Chrome prevents live reload.\n\n\n\n\n1.4.0\n\ue157\n\n\n\n\ncss\n setting can now be an array and contain multiple CSS files (see settings file for more info).\n\n\nUpdated GitHub style to latest.\n\n\n\n\n1.3.0\n\ue157\n\n\n\n\nNow supports any markdown parser through a generalized method.  Now you can map a binary to parser name via \nmarkdown_binary_map\n.  Then use the parser name in \nenabled_parsers\n to use it.\n\n\nMultiMarkdown specific settings have been removed.  MultiMarkdown should now be configured via \nmarkdown_binary_map\n and \nenabled_parsers\n.\n\n\nUpgraded to Python Markdown 2.6.4.\n\n\nRemoved internal PyYaml and Pygments.  Markdown Preview now uses Package Control dependencies to obtain PyYaml and Pygments.\n\n\nUpdate kbd CSS for GitHub.\n\n\n\n\n1.0.3\n\ue157\n\n\n\n\nThe \nmessages.json\n should OK for this time.\n\n\n\n\n1.0.2\n\ue157\n\n\n\n\nFixes messages.json and changelog versions.\n\n\n\n\n1.0.1\n\ue157\n\n\n\n\nRemoved markdown2 parser for its not well maintained and buggy.\n\n\nMake Python Markdown parser as default.\n\n\nSplit the preview commands for \nPython Markdown\n parser and \nGitHub Flavored Markdown\n parser.\n\n\nAdd markdown file build support, build parser are config via the origin \n\"parser\"\n settings.\n\n\nAdd this changelog file for both developers and users.\n\n\nAdd messages.json which make display of \nREADME.md\n and \nCHANGES.md\n\n\nTry use \nMarkdown Extended.tmLanguage\n for cheat sheet if you installed \nMarkdown Extended\n.\n\n\n\n\n1.0.0\n\ue157\n\n\n\n\nSupport for ST3.\n\n\nAdded Python Markdown parser.\n\n\nCSS search first in markdown file directory and the the build-in.",
            "title": "Changes"
        },
        {
            "location": "/changes/#changes",
            "text": "",
            "title": "Changes"
        },
        {
            "location": "/changes/#202",
            "text": "Code highlighting should have guessing disabled by default.  Fix failure when code highlighting has guessing enabled, but the user specified a language name which has no lexer.",
            "title": "2.0.2"
        },
        {
            "location": "/changes/#201",
            "text": "Fix missing code highlight extension.  Fix build command failing.",
            "title": "2.0.1"
        },
        {
            "location": "/changes/#200",
            "text": "Please read documentation as there have been big changes in this version which may require updates to your personal settings.    Do not vendor Python Markdown. Python Markdown will be acquired via the current markdown dependency.    Python Markdown configuration changes:   No more defining settings as  extension(option1=a,option2=b) . Options will be defined as a dictionary.  You will have to define the full extension name:  markdown.extensions.codehilite . This will allow you to import any extension you want outside of Markdown Preview.  New line to  <br>  conversion has been dropped from GitHub emulation as GitHub no longer does this. Ref issue  #374 .     Originally a couple pymdownx-extension extensions were ported over to this plugin to give a GitHub-ish feel to Markdown, these are no longer be included directly, but are included as a dependency. This will provide the latest versions, and also provide new extensions previously not included. Ref issue  #378 .    Drop ST2 so we no longer have to provide specially crafted Python Markdown versions when we try to upgrade.    Improve yaml front matter parsing: see issue  #392 .    Better UML JavaScript injection.    Link contributors in readme.    Remove \"magic\" Pygments configuration. User will now explicitly configure Pygments CSS injection separately.    Require explicit parser name moving forward instead of default, but provide a deprecation path for the short term.    Fix GitHub header ID generation. GitHub only lowercases ASCII chars.    Ensure default parser is Python Markdown, and enable auto-reload by default.    Hopefully better documentation.    Make flake8 compatible.    Fix outdated links.    Remove MathJax and UML option in favor of a more generalized solution via the pre-existing  css  option.    Remove  embed_css_for_sublime_output  option in favor of more generalized  include_head  option.",
            "title": "2.0.0"
        },
        {
            "location": "/changes/#143",
            "text": "Fix issue where Chrome prevents live reload.",
            "title": "1.4.3"
        },
        {
            "location": "/changes/#140",
            "text": "css  setting can now be an array and contain multiple CSS files (see settings file for more info).  Updated GitHub style to latest.",
            "title": "1.4.0"
        },
        {
            "location": "/changes/#130",
            "text": "Now supports any markdown parser through a generalized method.  Now you can map a binary to parser name via  markdown_binary_map .  Then use the parser name in  enabled_parsers  to use it.  MultiMarkdown specific settings have been removed.  MultiMarkdown should now be configured via  markdown_binary_map  and  enabled_parsers .  Upgraded to Python Markdown 2.6.4.  Removed internal PyYaml and Pygments.  Markdown Preview now uses Package Control dependencies to obtain PyYaml and Pygments.  Update kbd CSS for GitHub.",
            "title": "1.3.0"
        },
        {
            "location": "/changes/#103",
            "text": "The  messages.json  should OK for this time.",
            "title": "1.0.3"
        },
        {
            "location": "/changes/#102",
            "text": "Fixes messages.json and changelog versions.",
            "title": "1.0.2"
        },
        {
            "location": "/changes/#101",
            "text": "Removed markdown2 parser for its not well maintained and buggy.  Make Python Markdown parser as default.  Split the preview commands for  Python Markdown  parser and  GitHub Flavored Markdown  parser.  Add markdown file build support, build parser are config via the origin  \"parser\"  settings.  Add this changelog file for both developers and users.  Add messages.json which make display of  README.md  and  CHANGES.md  Try use  Markdown Extended.tmLanguage  for cheat sheet if you installed  Markdown Extended .",
            "title": "1.0.1"
        },
        {
            "location": "/changes/#100",
            "text": "Support for ST3.  Added Python Markdown parser.  CSS search first in markdown file directory and the the build-in.",
            "title": "1.0.0"
        },
        {
            "location": "/license/",
            "text": "License\n\ue157\n\n\nCopyright \u00a9 2015 Julien Bouquillon, revolunet \njulien@revolunet.com\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "title": "License"
        },
        {
            "location": "/license/#license",
            "text": "Copyright \u00a9 2015 Julien Bouquillon, revolunet  julien@revolunet.com  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
            "title": "License"
        }
    ]
}